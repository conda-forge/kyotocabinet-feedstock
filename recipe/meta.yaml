{% set name = "kyotocabinet" %}
{% set version = "1.2.77" %}
{% set sha256 = "56899329384cc6f0f1f8aa3f1b41001071ca99c1d79225086a7f3575c0209de6" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://fallabs.com/kyotocabinet/pkg/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    # Newer ubuntu gcc's have stativ inline functions which the -ansi flag disables
    - configure.patch  # [linux]
    # This patch has nothing to do with the code. It deactivates one of the check tasks in
    # the Makefile, which keeps failing on *circleci* with and error that could not be
    # reproduced locally.
    - check_poly.patch
    # In the original source, the -march=native flag is set manually in the configure script,
    # which overrides the -march=nocona flag set by the conda build environment.
    # This patch removes a section of the configure script, responsible for local system
    # optimizations.
    - march.patch

build:
  number: 0
  skip: True  # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  host:
    - zlib
  run:
    - zlib

test:
  commands:
    - test -e $PREFIX/include/kccommon.h
    - test -e $PREFIX/lib/libkyotocabinet.so  # [linux]
    - test -e $PREFIX/lib/libkyotocabinet.dylib  # [osx]
    - test -e $PREFIX/lib/libkyotocabinet.a
    - test -e $PREFIX/lib/pkgconfig/kyotocabinet.pc
    - kchashmgr version

about:
  home: http://fallabs.com/kyotocabinet/
  license: GPL-3.0
  license_family: GPL
  license_file: COPYING
  summary: 'Kyoto Cabinet is a library of routines for managing a database'

  description: |
    Kyoto Cabinet is a library of routines for managing a database. The database is a simple data file containing
    records, each is a pair of  a key and a value. Every key and value is serial bytes with variable length. Both binary
    data and character string can be used as a key and a value. Each key must be unique within a database. There is
    neither concept of data tables nor data types. Records are organized in hash table or B+ tree.

    Kyoto Cabinet runs very fast. For example, elapsed time to store one million records is 0.9 seconds for hash
    database, and 1.1 seconds for B+ tree database. Moreover, the size of database is very small. For example,
    overhead for a record is 16 bytes for hash database, and 4 bytes for B+ tree database. Furthermore, scalability of
    Kyoto Cabinet is great. The database size can be up to 8EB (9.22e18 bytes).

    Kyoto Cabinet is written in the C++ language, and provided as API of C++, C, Java, Python, Ruby, Perl, and
    Lua. Kyoto Cabinet is available on platforms which have API conforming to C++03 with the TR1 library
    extensions. Kyoto Cabinet is a free software licensed under the GNU General Public License. On the other hand, a
    commercial license is also provided. If you use Kyoto Cabinet within a proprietary software, the commercial
    license is required.
  doc_url: http://fallabs.com/kyotocabinet/

extra:
  recipe-maintainers:
    - yuriy-davygora
